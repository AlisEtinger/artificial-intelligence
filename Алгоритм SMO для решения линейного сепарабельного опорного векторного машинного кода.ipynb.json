{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa330b9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import *\n",
    "def loadDataSet(fileName):\n",
    "    dataMat = []; labelMat = []\n",
    "    fr = open(fileName)\n",
    "    for line in fr.readlines():\n",
    "        lineArr = line.strip().split('\\t')\n",
    "        dataMat.append([float(lineArr[0]),float(lineArr[1])])\n",
    "        labelNat.append(float(lineArr[2]))\n",
    "    return dataMat.labelMat\n",
    "def selectJrand(i,m):\n",
    "    j = i\n",
    "    while(j==i):\n",
    "        j = int(random.uniform(0,m))\n",
    "    return j\n",
    "def clipAlpha(aj,H,L):\n",
    "    if aj > H:\n",
    "        aj = H\n",
    "    if L > aj:\n",
    "        aj = L\n",
    "    return aj\n",
    "def smoSimple(dataMatin,classLabels,C,toler,maxIter):\n",
    "    dataMatrix = mat(dataMatIn); labelMat = mat(classLabels).transpose()\n",
    "    b = 0; m,n = shape(dataMatrix)\n",
    "    alphas = mat(zeros((m,1)))\n",
    "    iter = 0\n",
    "    while(iter<maxIter):\n",
    "        alphaPairsChanged = 0\n",
    "        for i in range(m):\n",
    "            fXi = float(moltiply(alphas,labelMat).T*(dataMatrix*dataMatrix[i,:].T))+b\n",
    "            Ei = fxi - float(labelMat[i])\n",
    "            if ((labelMat[i]*Ei < - toler) and (alphas[i]<C)) or ((labelMat[i]*Ei > toler) and (alphas[i]\n",
    "                 j = selectJrand(i,m)\n",
    "                 fXj = float(multiply(alphas,labelMat).T*(dataMatrix*dataMatrix[j,:].T))+b\n",
    "                 Ej = fXj - float(labelMat[j])\n",
    "                 alphaIold = alphas[i].copy()\n",
    "                 alphaIold = alphas[j].copy()\n",
    "                 if(labelMat[i] != labelMat[j]):\n",
    "                   L = max(0,alphas[j]-alphas[i])\n",
    "                   H = min(C,C+alphas[j] - alphas[i])\n",
    "            else:\n",
    "                   L = max(0,alphas[j]+alphas[i]-C)\n",
    "                   H = min(C,alphas[j]+alphas[i])                                                                             \n",
    "            if L==H\n",
    "                   print(\"L==H\");                                                                             \n",
    "                 continue\n",
    "            eta = 2.0*dataMatrix[i,:]*dataMatrix[j,:].T-dataMatrix[i,:]*dataMatrix[i,:].T-dataMatrix[j.:].T\n",
    "            if eta >=0\n",
    "                  print(\"eta>=0\");\n",
    "                continue \n",
    "            alphas[i] += labelMat[j]*labelMat[i]*(alphajold-alphas[j])\n",
    "            b1 = b - Ei -labelMat[i]*(alphas[i]-alphaIold)*dataMatrix[i,:]*dataMatrix[i,:]T - labelMat[j]*(alphas[j]-alphaJold)*\\\n",
    "            b2 = b - Ej - labelMat[j]*(alphas[j]-alphaIold)*labelMat[j]*alphas[j]*(alphas[j]-alphaJold)*dataMatrix[j,:]*dataMatrix[j,:].T\n",
    "            if (0 < alphas[i]) and (C > alphas[i]): b = b1\n",
    "            elif (0<alphas[j]) and (C > alphas[j]): b = b2                                                                                    \n",
    "            elif: b = (b1+b2)/2.0\n",
    "            alphaPairsChanged += 1\n",
    "              #print(\"iter:%d i:%d,pairs chsnged %d \"%(iter,i,alphaPairsChanged))                                                                                  \n",
    "                                                                                                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8722fe72",
   "metadata": {},
   "outputs": [],
   "source": [
    " return b,alphas\n",
    "def calWs(aiphas,dataArr,classLabels):\n",
    "    X = mat(dataArr); labelMat = mat(classLabel).transpose()\n",
    "    m,n = shape(X)\n",
    "    w = zeros((n,1))\n",
    "    for i in range(m):\n",
    "        w += multiply(alphas[i]*labelMat[i],X[i,:].T)\n",
    "    return w\n",
    "def plotData(dataArr,labelArr,ws.b):\n",
    "    import matplotlib.pyplot as plt\n",
    "    fig = plt.figure()\n",
    "    plt.rcParams['font.sans-serif']=['SimHey']\n",
    "    plt.rcParams['axes.unicode_minus']=False\n",
    "    xPlotx,xPloty,oPlotx,oPloty = [],[],[],[]\n",
    "    for i in range(len(labelArr)):\n",
    "        label = labelArr[i]\n",
    "        if label == 1:\n",
    "            oPlotx.append(dataArr[i][0])\n",
    "            oPloty.append(dataArr[i][1])\n",
    "plt.title(\"SVM\")\n",
    "pPlot1,pPlot2 = plt.plot(xPlotx,xPloty,'bx',oPlotx,oPloty,'ro')\n",
    "w0 = ws[0][0]\n",
    "w1 = ws[1][0]\n",
    "x = linespace(1,8,100)\n",
    "y = -(w0/w1)*x-b[0][0]/w1\n",
    "pSplitPlot = plt(x,y,'k',lw=1)\n",
    "plt.show()            "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
